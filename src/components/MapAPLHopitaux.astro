---
import "leaflet/dist/leaflet.css";
---

<div id="mapAPLHopitaux" class="w-full max-w-6xl h-[700px] rounded-2xl shadow-lg mx-auto"></div>

<script client:load>
  (async () => {
    const L = await import("https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js");
    const d3 = await import("https://cdn.jsdelivr.net/npm/d3@7/+esm");

    const map = L.map("mapAPLHopitaux").setView([46.6, 2.5], 6);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "© OpenStreetMap contributors"
    }).addTo(map);

    const france = await fetch("/data/france.geojson").then(r => r.json());
    const APLbyDept = await fetch("/data/APLbyDept.json").then(r => r.json());
    const countByDept = await fetch("/data/countByDept.json").then(r => r.json());

    const aplMap = new Map(APLbyDept.map(d => [d.code_departement, d.APL_moyenne]));
    const counts = new Map(countByDept.data.map(d => [d.code_departement, d.total]));
    const maxCount = countByDept.max || 1;

    const aplScale = d3.scaleSequential(d3.interpolateRdYlGn).domain([0, 6]);
    const rScale = d3.scaleSqrt().domain([0, maxCount]).range([0, 20]);

    const depLayer = L.geoJSON(france, {
      style: feature => {
        const code = String(feature.properties.code).padStart(2, "0");
        const apl = aplMap.get(code);
        return {
          fillColor: apl ? aplScale(apl) : "#ccc",
          weight: 1,
          color: "white",
          fillOpacity: 0.85
        };
      },
      onEachFeature: (feature, layer) => {
        const code = String(feature.properties.code).padStart(2, "0");
        const apl = aplMap.get(code);
        const aplTxt = apl ? apl.toFixed(2) : "ND";
        layer.bindPopup(`<b>${feature.properties.nom}</b><br>APL moyenne : ${aplTxt}`);
      }
    }).addTo(map);

    const bubbles = L.layerGroup().addTo(map);
    depLayer.eachLayer(layer => {
      const code = String(layer.feature.properties.code).padStart(2, "0");
      const total = counts.get(code) || 0;
      const r = rScale(total);
      if (r > 0) {
        const center = layer.getBounds().getCenter();
        L.circleMarker(center, {
          radius: r,
          color: "white",
          weight: 1,
          fillColor: "rgba(30,144,255,0.55)",
          fillOpacity: 0.6
        }).bindTooltip(
          `<b>${layer.feature.properties.nom}</b><br>${total} établissement${total > 1 ? "s" : ""}`,
          { sticky: true }
        ).addTo(bubbles);
      }
    });

    // ✅ Légende
    const legend = L.control({ position: "bottomright" });
    legend.onAdd = function () {
      const div = L.DomUtil.create("div", "info legend bg-white rounded-lg p-2 shadow-md text-sm");
      div.innerHTML = `
        <b>APL moyenne</b><br>
        <i style="background: ${aplScale(6)}; width: 18px; height: 18px; display:inline-block;"></i> Élevée<br>
        <i style="background: ${aplScale(3)}; width: 18px; height: 18px; display:inline-block;"></i> Moyenne<br>
        <i style="background: ${aplScale(0)}; width: 18px; height: 18px; display:inline-block;"></i> Faible<br>
        <hr class="my-1">
        <svg width="80" height="35">
          <circle cx="20" cy="15" r="10" fill="rgba(30,144,255,0.55)" stroke="white" stroke-width="1"></circle>
        </svg> Offre hospitalière
      `;
      return div;
    };
    legend.addTo(map);

    setTimeout(() => map.invalidateSize(), 400);
  })();
</script>
