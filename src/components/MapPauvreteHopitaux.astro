---
import "leaflet/dist/leaflet.css";
---

<div id="mapPauvreteHopitaux" class="w-full max-w-6xl h-[700px] rounded-2xl shadow-lg mx-auto"></div>

<script client:load>
  (async () => {
    const L = await import("https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js");
    const d3 = await import("https://cdn.jsdelivr.net/npm/d3@7.8.5/+esm");

    const france = await (await fetch("/data/france.geojson")).json();
    const povByDept = await (await fetch("/data/povByDept.json")).json();
    const hospByDept = await (await fetch("/data/hospByDept.json")).json();

    const povMap = new Map(povByDept.map(([code, value]) => [String(code).padStart(2, "0"), value]));
    const maxPov = d3.max(povByDept, ([, v]) => v) || 30;
    const maxHosp = d3.max(hospByDept, (d) => d.total) || 1;

    const color = d3.scaleSequential(d3.interpolateReds).domain([0, maxPov]);
    const r = d3.scaleSqrt().domain([0, maxHosp]).range([0, 20]);

    const map = L.map("mapPauvreteHopitaux").setView([46.6, 2.5], 6);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "© OpenStreetMap contributors"
    }).addTo(map);

    const layer = L.geoJSON(france, {
      style: (f) => {
        const code = String(f.properties.code).padStart(2, "0");
        const p = povMap.get(code);
        return {
          fillColor: p != null ? color(p) : "#ddd",
          color: "white",
          weight: 1,
          fillOpacity: 0.85
        };
      },
      onEachFeature: (f, l) => {
        const code = String(f.properties.code).padStart(2, "0");
        const p = povMap.get(code);
        l.bindPopup(
          `<b>${f.properties.nom}</b><br>Taux de pauvreté : ${
            p != null ? p.toFixed(1) + " %" : "ND"
          }`
        );
      }
    }).addTo(map);

    const bubbles = L.layerGroup().addTo(map);
    layer.eachLayer((l) => {
      const code = String(l.feature.properties.code).padStart(2, "0");
      const h = hospByDept.find((d) => d.code_departement === code)?.total || 0;
      const radius = r(h);
      if (radius > 0) {
        const c = l.getBounds().getCenter();
        L.circleMarker(c, {
          radius,
          color: "white",
          weight: 0.8,
          fillColor: "rgba(30,144,255,0.6)",
          fillOpacity: 0.7
        }).bindTooltip(
          `<b>${l.feature.properties.nom}</b><br>${h} établissement${h > 1 ? "s" : ""}`,
          { sticky: true }
        ).addTo(bubbles);
      }
    });

    // ✅ Légendes claires
    const legendPov = L.control({ position: "bottomleft" });
    legendPov.onAdd = function () {
      const div = L.DomUtil.create("div", "info legend bg-white rounded-lg p-2 shadow-md text-sm");
      const grades = [0, 5, 10, 15, 20, 25, 30];
      div.innerHTML = `<b>Taux de pauvreté (%)</b><br>`;
      grades.forEach((v, i) => {
        div.innerHTML += `<i style="background:${color(v)};width:18px;height:18px;display:inline-block;margin-right:6px;"></i>${v}${
          grades[i + 1] ? "–" + grades[i + 1] : "+"}<br>`;
      });
      return div;
    };
    legendPov.addTo(map);

    const legendHosp = L.control({ position: "bottomright" });
    legendHosp.onAdd = function () {
      const div = L.DomUtil.create("div", "info legend bg-white rounded-lg p-2 shadow-md text-sm");
      div.innerHTML = `
        <b>Offre hospitalière</b><br>
        <svg width="80" height="35">
          <circle cx="20" cy="15" r="10" fill="rgba(30,144,255,0.6)" stroke="white" stroke-width="1"></circle>
        </svg> Volume relatif d’établissements
      `;
      return div;
    };
    legendHosp.addTo(map);

    setTimeout(() => map.invalidateSize(), 300);
  })();
</script>
